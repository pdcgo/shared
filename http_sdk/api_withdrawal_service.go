/*
proto/withdrawal_service/withdrawal.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package http_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// WithdrawalServiceAPIService WithdrawalServiceAPI service
type WithdrawalServiceAPIService service

type ApiWithdrawalServiceGetTaskListRequest struct {
	ctx context.Context
	ApiService *WithdrawalServiceAPIService
	teamId *string
	status *string
}

func (r ApiWithdrawalServiceGetTaskListRequest) TeamId(teamId string) ApiWithdrawalServiceGetTaskListRequest {
	r.teamId = &teamId
	return r
}

func (r ApiWithdrawalServiceGetTaskListRequest) Status(status string) ApiWithdrawalServiceGetTaskListRequest {
	r.status = &status
	return r
}

func (r ApiWithdrawalServiceGetTaskListRequest) Execute() (*WithdrawalIfaceTaskListResponse, *http.Response, error) {
	return r.ApiService.WithdrawalServiceGetTaskListExecute(r)
}

/*
WithdrawalServiceGetTaskList Method for WithdrawalServiceGetTaskList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWithdrawalServiceGetTaskListRequest
*/
func (a *WithdrawalServiceAPIService) WithdrawalServiceGetTaskList(ctx context.Context) ApiWithdrawalServiceGetTaskListRequest {
	return ApiWithdrawalServiceGetTaskListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WithdrawalIfaceTaskListResponse
func (a *WithdrawalServiceAPIService) WithdrawalServiceGetTaskListExecute(r ApiWithdrawalServiceGetTaskListRequest) (*WithdrawalIfaceTaskListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WithdrawalIfaceTaskListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WithdrawalServiceAPIService.WithdrawalServiceGetTaskList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/withdrawal/task/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.teamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teamId", r.teamId, "", "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "", "")
	} else {
		var defaultValue string = "TASK_UNKNOWN"
		r.status = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWithdrawalServiceHealthCheckRequest struct {
	ctx context.Context
	ApiService *WithdrawalServiceAPIService
	id *string
}

func (r ApiWithdrawalServiceHealthCheckRequest) Id(id string) ApiWithdrawalServiceHealthCheckRequest {
	r.id = &id
	return r
}

func (r ApiWithdrawalServiceHealthCheckRequest) Execute() (*WithdrawalIfaceCommonResponse, *http.Response, error) {
	return r.ApiService.WithdrawalServiceHealthCheckExecute(r)
}

/*
WithdrawalServiceHealthCheck Method for WithdrawalServiceHealthCheck

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWithdrawalServiceHealthCheckRequest
*/
func (a *WithdrawalServiceAPIService) WithdrawalServiceHealthCheck(ctx context.Context) ApiWithdrawalServiceHealthCheckRequest {
	return ApiWithdrawalServiceHealthCheckRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WithdrawalIfaceCommonResponse
func (a *WithdrawalServiceAPIService) WithdrawalServiceHealthCheckExecute(r ApiWithdrawalServiceHealthCheckRequest) (*WithdrawalIfaceCommonResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WithdrawalIfaceCommonResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WithdrawalServiceAPIService.WithdrawalServiceHealthCheck")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/withdrawal/health"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWithdrawalServiceRunRequest struct {
	ctx context.Context
	ApiService *WithdrawalServiceAPIService
	id *string
}

func (r ApiWithdrawalServiceRunRequest) Id(id string) ApiWithdrawalServiceRunRequest {
	r.id = &id
	return r
}

func (r ApiWithdrawalServiceRunRequest) Execute() (*WithdrawalIfaceCommonResponse, *http.Response, error) {
	return r.ApiService.WithdrawalServiceRunExecute(r)
}

/*
WithdrawalServiceRun Method for WithdrawalServiceRun

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWithdrawalServiceRunRequest
*/
func (a *WithdrawalServiceAPIService) WithdrawalServiceRun(ctx context.Context) ApiWithdrawalServiceRunRequest {
	return ApiWithdrawalServiceRunRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WithdrawalIfaceCommonResponse
func (a *WithdrawalServiceAPIService) WithdrawalServiceRunExecute(r ApiWithdrawalServiceRunRequest) (*WithdrawalIfaceCommonResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WithdrawalIfaceCommonResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WithdrawalServiceAPIService.WithdrawalServiceRun")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/withdrawal/run"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWithdrawalServiceStopRequest struct {
	ctx context.Context
	ApiService *WithdrawalServiceAPIService
	id *string
}

func (r ApiWithdrawalServiceStopRequest) Id(id string) ApiWithdrawalServiceStopRequest {
	r.id = &id
	return r
}

func (r ApiWithdrawalServiceStopRequest) Execute() (*WithdrawalIfaceCommonResponse, *http.Response, error) {
	return r.ApiService.WithdrawalServiceStopExecute(r)
}

/*
WithdrawalServiceStop Method for WithdrawalServiceStop

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWithdrawalServiceStopRequest
*/
func (a *WithdrawalServiceAPIService) WithdrawalServiceStop(ctx context.Context) ApiWithdrawalServiceStopRequest {
	return ApiWithdrawalServiceStopRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WithdrawalIfaceCommonResponse
func (a *WithdrawalServiceAPIService) WithdrawalServiceStopExecute(r ApiWithdrawalServiceStopRequest) (*WithdrawalIfaceCommonResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WithdrawalIfaceCommonResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WithdrawalServiceAPIService.WithdrawalServiceStop")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/withdrawal/stop"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWithdrawalServiceSubmitWithdrawalRequest struct {
	ctx context.Context
	ApiService *WithdrawalServiceAPIService
	body *WithdrawalIfaceSubmitWdRequest
}

func (r ApiWithdrawalServiceSubmitWithdrawalRequest) Body(body WithdrawalIfaceSubmitWdRequest) ApiWithdrawalServiceSubmitWithdrawalRequest {
	r.body = &body
	return r
}

func (r ApiWithdrawalServiceSubmitWithdrawalRequest) Execute() (*WithdrawalIfaceCommonResponse, *http.Response, error) {
	return r.ApiService.WithdrawalServiceSubmitWithdrawalExecute(r)
}

/*
WithdrawalServiceSubmitWithdrawal Method for WithdrawalServiceSubmitWithdrawal

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWithdrawalServiceSubmitWithdrawalRequest
*/
func (a *WithdrawalServiceAPIService) WithdrawalServiceSubmitWithdrawal(ctx context.Context) ApiWithdrawalServiceSubmitWithdrawalRequest {
	return ApiWithdrawalServiceSubmitWithdrawalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WithdrawalIfaceCommonResponse
func (a *WithdrawalServiceAPIService) WithdrawalServiceSubmitWithdrawalExecute(r ApiWithdrawalServiceSubmitWithdrawalRequest) (*WithdrawalIfaceCommonResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WithdrawalIfaceCommonResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WithdrawalServiceAPIService.WithdrawalServiceSubmitWithdrawal")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/withdrawal/task/submit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
