/*
proto/withdrawal_service/withdrawal.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package http_sdk

import (
	"encoding/json"
	"fmt"
)

// WithdrawalIfaceTaskStatus the model 'WithdrawalIfaceTaskStatus'
type WithdrawalIfaceTaskStatus string

// List of withdrawal_ifaceTaskStatus
const (
	TASK_ALL WithdrawalIfaceTaskStatus = "TASK_ALL"
	TASK_UNKNOWN WithdrawalIfaceTaskStatus = "TASK_UNKNOWN"
	TASK_ERROR WithdrawalIfaceTaskStatus = "TASK_ERROR"
	TASK_WAITING WithdrawalIfaceTaskStatus = "TASK_WAITING"
	TASK_PROCESS WithdrawalIfaceTaskStatus = "TASK_PROCESS"
)

// All allowed values of WithdrawalIfaceTaskStatus enum
var AllowedWithdrawalIfaceTaskStatusEnumValues = []WithdrawalIfaceTaskStatus{
	"TASK_ALL",
	"TASK_UNKNOWN",
	"TASK_ERROR",
	"TASK_WAITING",
	"TASK_PROCESS",
}

func (v *WithdrawalIfaceTaskStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WithdrawalIfaceTaskStatus(value)
	for _, existing := range AllowedWithdrawalIfaceTaskStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WithdrawalIfaceTaskStatus", value)
}

// NewWithdrawalIfaceTaskStatusFromValue returns a pointer to a valid WithdrawalIfaceTaskStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWithdrawalIfaceTaskStatusFromValue(v string) (*WithdrawalIfaceTaskStatus, error) {
	ev := WithdrawalIfaceTaskStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WithdrawalIfaceTaskStatus: valid values are %v", v, AllowedWithdrawalIfaceTaskStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WithdrawalIfaceTaskStatus) IsValid() bool {
	for _, existing := range AllowedWithdrawalIfaceTaskStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to withdrawal_ifaceTaskStatus value
func (v WithdrawalIfaceTaskStatus) Ptr() *WithdrawalIfaceTaskStatus {
	return &v
}

type NullableWithdrawalIfaceTaskStatus struct {
	value *WithdrawalIfaceTaskStatus
	isSet bool
}

func (v NullableWithdrawalIfaceTaskStatus) Get() *WithdrawalIfaceTaskStatus {
	return v.value
}

func (v *NullableWithdrawalIfaceTaskStatus) Set(val *WithdrawalIfaceTaskStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableWithdrawalIfaceTaskStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableWithdrawalIfaceTaskStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWithdrawalIfaceTaskStatus(val *WithdrawalIfaceTaskStatus) *NullableWithdrawalIfaceTaskStatus {
	return &NullableWithdrawalIfaceTaskStatus{value: val, isSet: true}
}

func (v NullableWithdrawalIfaceTaskStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWithdrawalIfaceTaskStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

