/*
proto/withdrawal_service/withdrawal.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package http_sdk

import (
	"encoding/json"
	"fmt"
)

// WithdrawalIfaceImporterSource the model 'WithdrawalIfaceImporterSource'
type WithdrawalIfaceImporterSource string

// List of withdrawal_ifaceImporterSource
const (
	SOURCE_UNKNOWN WithdrawalIfaceImporterSource = "SOURCE_UNKNOWN"
	SOURCE_CSV WithdrawalIfaceImporterSource = "SOURCE_CSV"
	SOURCE_XLS WithdrawalIfaceImporterSource = "SOURCE_XLS"
	SOURCE_JSON WithdrawalIfaceImporterSource = "SOURCE_JSON"
)

// All allowed values of WithdrawalIfaceImporterSource enum
var AllowedWithdrawalIfaceImporterSourceEnumValues = []WithdrawalIfaceImporterSource{
	"SOURCE_UNKNOWN",
	"SOURCE_CSV",
	"SOURCE_XLS",
	"SOURCE_JSON",
}

func (v *WithdrawalIfaceImporterSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WithdrawalIfaceImporterSource(value)
	for _, existing := range AllowedWithdrawalIfaceImporterSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WithdrawalIfaceImporterSource", value)
}

// NewWithdrawalIfaceImporterSourceFromValue returns a pointer to a valid WithdrawalIfaceImporterSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWithdrawalIfaceImporterSourceFromValue(v string) (*WithdrawalIfaceImporterSource, error) {
	ev := WithdrawalIfaceImporterSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WithdrawalIfaceImporterSource: valid values are %v", v, AllowedWithdrawalIfaceImporterSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WithdrawalIfaceImporterSource) IsValid() bool {
	for _, existing := range AllowedWithdrawalIfaceImporterSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to withdrawal_ifaceImporterSource value
func (v WithdrawalIfaceImporterSource) Ptr() *WithdrawalIfaceImporterSource {
	return &v
}

type NullableWithdrawalIfaceImporterSource struct {
	value *WithdrawalIfaceImporterSource
	isSet bool
}

func (v NullableWithdrawalIfaceImporterSource) Get() *WithdrawalIfaceImporterSource {
	return v.value
}

func (v *NullableWithdrawalIfaceImporterSource) Set(val *WithdrawalIfaceImporterSource) {
	v.value = val
	v.isSet = true
}

func (v NullableWithdrawalIfaceImporterSource) IsSet() bool {
	return v.isSet
}

func (v *NullableWithdrawalIfaceImporterSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWithdrawalIfaceImporterSource(val *WithdrawalIfaceImporterSource) *NullableWithdrawalIfaceImporterSource {
	return &NullableWithdrawalIfaceImporterSource{value: val, isSet: true}
}

func (v NullableWithdrawalIfaceImporterSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWithdrawalIfaceImporterSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

