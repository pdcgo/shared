// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/invoice_service/invoice.proto

package invoice_iface

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InvoiceService_GetLimitInvoice_FullMethodName    = "/invoice_iface.InvoiceService/GetLimitInvoice"
	InvoiceService_SetLimitInvoice_FullMethodName    = "/invoice_iface.InvoiceService/SetLimitInvoice"
	InvoiceService_LimitInvoiceDelete_FullMethodName = "/invoice_iface.InvoiceService/LimitInvoiceDelete"
	InvoiceService_LimitInvoiceList_FullMethodName   = "/invoice_iface.InvoiceService/LimitInvoiceList"
)

// InvoiceServiceClient is the client API for InvoiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvoiceServiceClient interface {
	GetLimitInvoice(ctx context.Context, in *TeamLimitInvoiceReq, opts ...grpc.CallOption) (*TeamLimitInvoiceRes, error)
	SetLimitInvoice(ctx context.Context, in *SetLimitInvoiceReq, opts ...grpc.CallOption) (*SetLimitInvoiceRes, error)
	LimitInvoiceDelete(ctx context.Context, in *LimitInvoiceDeleteReq, opts ...grpc.CallOption) (*CommonRes, error)
	LimitInvoiceList(ctx context.Context, in *ConfigListReq, opts ...grpc.CallOption) (*ConfigListRes, error)
}

type invoiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoiceServiceClient(cc grpc.ClientConnInterface) InvoiceServiceClient {
	return &invoiceServiceClient{cc}
}

func (c *invoiceServiceClient) GetLimitInvoice(ctx context.Context, in *TeamLimitInvoiceReq, opts ...grpc.CallOption) (*TeamLimitInvoiceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeamLimitInvoiceRes)
	err := c.cc.Invoke(ctx, InvoiceService_GetLimitInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) SetLimitInvoice(ctx context.Context, in *SetLimitInvoiceReq, opts ...grpc.CallOption) (*SetLimitInvoiceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLimitInvoiceRes)
	err := c.cc.Invoke(ctx, InvoiceService_SetLimitInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) LimitInvoiceDelete(ctx context.Context, in *LimitInvoiceDeleteReq, opts ...grpc.CallOption) (*CommonRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonRes)
	err := c.cc.Invoke(ctx, InvoiceService_LimitInvoiceDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) LimitInvoiceList(ctx context.Context, in *ConfigListReq, opts ...grpc.CallOption) (*ConfigListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigListRes)
	err := c.cc.Invoke(ctx, InvoiceService_LimitInvoiceList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoiceServiceServer is the server API for InvoiceService service.
// All implementations must embed UnimplementedInvoiceServiceServer
// for forward compatibility.
type InvoiceServiceServer interface {
	GetLimitInvoice(context.Context, *TeamLimitInvoiceReq) (*TeamLimitInvoiceRes, error)
	SetLimitInvoice(context.Context, *SetLimitInvoiceReq) (*SetLimitInvoiceRes, error)
	LimitInvoiceDelete(context.Context, *LimitInvoiceDeleteReq) (*CommonRes, error)
	LimitInvoiceList(context.Context, *ConfigListReq) (*ConfigListRes, error)
	mustEmbedUnimplementedInvoiceServiceServer()
}

// UnimplementedInvoiceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInvoiceServiceServer struct{}

func (UnimplementedInvoiceServiceServer) GetLimitInvoice(context.Context, *TeamLimitInvoiceReq) (*TeamLimitInvoiceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimitInvoice not implemented")
}
func (UnimplementedInvoiceServiceServer) SetLimitInvoice(context.Context, *SetLimitInvoiceReq) (*SetLimitInvoiceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLimitInvoice not implemented")
}
func (UnimplementedInvoiceServiceServer) LimitInvoiceDelete(context.Context, *LimitInvoiceDeleteReq) (*CommonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitInvoiceDelete not implemented")
}
func (UnimplementedInvoiceServiceServer) LimitInvoiceList(context.Context, *ConfigListReq) (*ConfigListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitInvoiceList not implemented")
}
func (UnimplementedInvoiceServiceServer) mustEmbedUnimplementedInvoiceServiceServer() {}
func (UnimplementedInvoiceServiceServer) testEmbeddedByValue()                        {}

// UnsafeInvoiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoiceServiceServer will
// result in compilation errors.
type UnsafeInvoiceServiceServer interface {
	mustEmbedUnimplementedInvoiceServiceServer()
}

func RegisterInvoiceServiceServer(s grpc.ServiceRegistrar, srv InvoiceServiceServer) {
	// If the following call pancis, it indicates UnimplementedInvoiceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InvoiceService_ServiceDesc, srv)
}

func _InvoiceService_GetLimitInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamLimitInvoiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetLimitInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_GetLimitInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetLimitInvoice(ctx, req.(*TeamLimitInvoiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_SetLimitInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLimitInvoiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).SetLimitInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_SetLimitInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).SetLimitInvoice(ctx, req.(*SetLimitInvoiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_LimitInvoiceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitInvoiceDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).LimitInvoiceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_LimitInvoiceDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).LimitInvoiceDelete(ctx, req.(*LimitInvoiceDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_LimitInvoiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).LimitInvoiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_LimitInvoiceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).LimitInvoiceList(ctx, req.(*ConfigListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// InvoiceService_ServiceDesc is the grpc.ServiceDesc for InvoiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvoiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "invoice_iface.InvoiceService",
	HandlerType: (*InvoiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLimitInvoice",
			Handler:    _InvoiceService_GetLimitInvoice_Handler,
		},
		{
			MethodName: "SetLimitInvoice",
			Handler:    _InvoiceService_SetLimitInvoice_Handler,
		},
		{
			MethodName: "LimitInvoiceDelete",
			Handler:    _InvoiceService_LimitInvoiceDelete_Handler,
		},
		{
			MethodName: "LimitInvoiceList",
			Handler:    _InvoiceService_LimitInvoiceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/invoice_service/invoice.proto",
}
